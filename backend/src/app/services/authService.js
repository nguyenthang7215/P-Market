import jwt from 'jsonwebtoken';
import bcrypt from 'bcrypt';
import dotenv from 'dotenv';
import moment from 'moment';
import Redis from 'ioredis'; // S·ª≠ d·ª•ng Redis
import * as userService from './userService' // Service ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi DB User

dotenv.config();

// // --- C·∫•u h√¨nh Redis Client ---
// const redisClient = new Redis(process.env.REDIS_URL, {
//     lazyConnect: true, // K·∫øt n·ªëi khi c·∫ßn
//     maxRetriesPerRequest: 1,
// });
// redisClient.on('error', (err) => console.error('L·ªói Redis Client:', err));
// redisClient.on('connect', () => console.log('üîå ƒê√£ k·∫øt n·ªëi Redis cho blocklist token.'));
// const BLOCKLIST_PREFIX = 'blocklist:'; // Ti·ªÅn t·ªë cho key Redis

// // --- C√°c h√†m Service ---

// /**
//  * Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p (email, password).
//  * @param {string} email
//  * @param {string} password M·∫≠t kh·∫©u th√¥ t·ª´ ng∆∞·ªùi d√πng.
//  * @returns {Promise<User|false>} Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng User Sequelize n·∫øu h·ª£p l·ªá, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ false.
//  */
export async function checkValidLogin(email, password) {
    // G·ªçi userService ƒë·ªÉ t√¨m user (bao g·ªìm c·∫£ passwordHash)
    const user = await userService.findUserByEmail(email);

    if (user) {
        // So s√°nh m·∫≠t kh·∫©u th√¥ v·ªõi hash ƒë√£ l∆∞u
        const verified = await bcrypt.compare(password, user.passwordHash);
        if (verified) {
            return user; // Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng User n·∫øu kh·ªõp
        }
    }
    // Tr·∫£ v·ªÅ false n·∫øu kh√¥ng t√¨m th·∫•y user ho·∫∑c m·∫≠t kh·∫©u sai
    return false;
}

// /**
//  * T·∫°o token JWT cho ng∆∞·ªùi d√πng.
//  * @param {object} user ƒê·ªëi t∆∞·ª£ng User Sequelize (ho·∫∑c object t·ª´ .toJSON()).
//  * @returns {{access_token: string, expire_in: number, auth_type: string}} Chi ti·∫øt token.
//  */
// export function generateAuthToken(user) {
//     const payload = { id: user.id, email: user.email }; // Payload ch·ª©a th√¥ng tin ƒë·ªãnh danh
//     const secretKey = process.env.JWT_SECRET_KEY;
//     const expiresIn = process.env.JWT_EXPIRES_IN || '1h'; // L·∫•y th·ªùi h·∫°n t·ª´ .env ho·∫∑c m·∫∑c ƒë·ªãnh 1h

//     if (!secretKey) {
//         console.error('L·ªñI NGHI√äM TR·ªåNG: JWT_SECRET_KEY ch∆∞a ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong .env');
//         // N√©m l·ªói ƒë·ªÉ d·ª´ng, v√¨ kh√¥ng c√≥ key th√¨ kh√¥ng th·ªÉ t·∫°o token an to√†n
//         throw new Error('L·ªói c·∫•u h√¨nh server.');
//     }

//     const accessToken = jwt.sign(payload, secretKey, { expiresIn: expiresIn });
//     const decode = jwt.decode(accessToken);
//     const expireIn = decode.exp - decode.iat; // Th·ªùi gian c√≤n l·∫°i (gi√¢y)

//     return {
//         access_token: accessToken,
//         expire_in: expireIn > 0 ? expireIn : 0, // ƒê·∫£m b·∫£o kh√¥ng √¢m
//         auth_type: 'Bearer Token',
//     };
// }

// /**
//  * ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi (·ªßy quy·ªÅn cho userService).
//  * @param {object} userData D·ªØ li·ªáu ng∆∞·ªùi d√πng { userName, email, password }.
//  * @returns {Promise<User>} ƒê·ªëi t∆∞·ª£ng User Sequelize m·ªõi (ƒë√£ lo·∫°i b·ªè passwordHash).
//  */
export async function register({userName, email, password}) {
    // Ch·ªâ c·∫ßn g·ªçi userService, n√≥ s·∫Ω x·ª≠ l√Ω t·∫°o User v√† Wallet
    const newUser = await userService.createUser({userName, email, password});
    // userService ƒë√£ tr·∫£ v·ªÅ user kh√¥ng c√≥ passwordHash
    return newUser;
}

// /**
//  * Ch·∫∑n token JWT b·∫±ng c√°ch th√™m v√†o Redis v·ªõi th·ªùi gian h·∫øt h·∫°n c√≤n l·∫°i.
//  * @param {string} token Token JWT c·∫ßn ch·∫∑n.
//  * @returns {Promise<void>}
//  */
// export async function blockToken(token) {
//     try {
//         const decoded = jwt.decode(token);
//         if (!decoded || !decoded.exp) {
//             return; // B·ªè qua n·∫øu token kh√¥ng h·ª£p l·ªá
//         }

//         const expiresInTimestamp = decoded.exp; // Th·ªùi ƒëi·ªÉm h·∫øt h·∫°n (Unix timestamp)
//         const now = moment().unix(); // Th·ªùi ƒëi·ªÉm hi·ªán t·∫°i
//         const remainingSeconds = expiresInTimestamp - now; // S·ªë gi√¢y c√≤n l·∫°i

//         // Ch·ªâ th√™m v√†o Redis n·∫øu token ch∆∞a h·∫øt h·∫°n
//         if (remainingSeconds > 0) {
//             // D√πng SETEX: SET key value EX seconds
//             await redisClient.setex(`${BLOCKLIST_PREFIX}${token}`, remainingSeconds, 'blocked');
//             console.log(`Token ƒë√£ b·ªã ch·∫∑n trong Redis trong ${remainingSeconds} gi√¢y.`);
//         }
//     } catch (err) {
//         console.error('L·ªói khi ch·∫∑n token:', err.message);
//     }
// }

// /**
//  * Ki·ªÉm tra xem token c√≥ trong Redis blocklist hay kh√¥ng.
//  * @param {string} token Token JWT c·∫ßn ki·ªÉm tra.
//  * @returns {Promise<boolean>} True n·∫øu token b·ªã ch·∫∑n, False n·∫øu kh√¥ng ho·∫∑c c√≥ l·ªói Redis.
//  */
// export async function isTokenBlocked(token) {
//     try {
//         // D√πng EXISTS ƒë·ªÉ ki·ªÉm tra key c√≥ t·ªìn t·∫°i kh√¥ng
//         const result = await redisClient.exists(`${BLOCKLIST_PREFIX}${token}`);
//         return result === 1; // EXISTS tr·∫£ v·ªÅ 1 n·∫øu c√≥, 0 n·∫øu kh√¥ng
//     } catch (err) {
//         console.error('L·ªói Redis khi ki·ªÉm tra blocklist:', err.message);
//         return false; // An to√†n: coi nh∆∞ kh√¥ng b·ªã ch·∫∑n n·∫øu c√≥ l·ªói Redis
//     }
// }